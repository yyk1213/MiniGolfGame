#pragma once
#include "BasicFunction.h"

/*.cpp파일 정의*/
IDirect3DDevice9* g_pd3dDevice = 0;
int Width = 1024;
int Height = 768;
int g_iSwingCount = 0;
//각 클래스 객체 생성
WaitCamera g_WaitCamera;
FollowCamera g_FollowCamera;
ReadyCamera g_ReadyCamera;

RelayCamera g_RelayCamera;
PowerProcess g_PowerProcess;
//GameOver g_GameOver;
float terrainHeight;
D3DXVECTOR3 g_vBallPosition;
Ball g_pBall;
Terrain g_terrain;

Hole g_Hole;
DisplayCount g_DisplayCount;
Sky g_sky;
gameType g_eType = BASIC;
//bool close = false; //홀컵과 가까운지
float g_ballPower;
int g_fPower = 1;
D3DXVECTOR3 preBallPosition = D3DXVECTOR3(100.0f, 5.0f, -600.0f);		//첫 시작 좌표
D3DXVECTOR3 g_moveWaitCamera;
bool g_bisInHall = false;
bool g_isNoKey = true;
bool g_bDrop ;
////
MiniMap g_miniMap;
IDirect3DTexture9* mini_texture;//미니맵 텍스쳐

//나무
std::vector<ObjMesh*> _TreeList;
/*임시 저장 변수*/
float g_icomX = 99999.0f;
float g_icomZ = 99999.0f;

//-----------------------------------------------------------------------------//

// Setup

//-----------------------------------------------------------------------------//

bool Setup()
{

	g_FollowCamera.setDevice(g_pd3dDevice);
	g_ReadyCamera.setDevice(g_pd3dDevice);
	g_WaitCamera.setDevice(g_pd3dDevice);

	g_RelayCamera.setDevice(g_pd3dDevice);
	g_PowerProcess.setUp(g_pd3dDevice);
	g_DisplayCount.setUp(g_pd3dDevice);

	g_sky.Init(g_pd3dDevice);
	g_terrain.setUp(g_pd3dDevice, "resources/field.raw", 80, 80, 20, 0.1f);

	g_Hole.setUp(g_pd3dDevice);
	g_pBall.Setup(g_pd3dDevice, &g_terrain);
	g_vBallPosition = g_pBall.getBallPosition();
	g_ReadyCamera.setUp(g_vBallPosition);
	g_WaitCamera.setUp(g_vBallPosition);
	//g_GameOver.SetUp(g_pd3dDevice);
	//나무 셋팅
	DrawTrees();


	g_miniMap.setDevice(g_pd3dDevice);

	//g_pd3dDevice->SetRenderState(D3DRS_FILLMODE, D3DFILL_SOLID);
	g_pd3dDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

	return true;
}

//-----------------------------------------------------------------------------//

// Cleanup

//-----------------------------------------------------------------------------//

void Cleanup()
{
	g_pBall.CleanUp();
	g_PowerProcess.Cleanup();
	g_Hole.CleanUp();
	g_WaitCamera.CleanUp();
	g_ReadyCamera.CleanUp();
	g_DisplayCount.Cleanup();
}

void Update(float timeDelta, float timeElapsed)
{
	g_vBallPosition = g_pBall.getBallPosition();
	//홀 위치
	D3DXVECTOR3 holePosition = g_Hole.getHolePosition();
	D3DXVECTOR3 ball_holeD = g_vBallPosition - holePosition;
	float holeDistance = D3DXVec3Length(&ball_holeD);

	//power 값을 받아옴으로서 power값을 0.0이 아니게 만든다.
	if (GetAsyncKeyState('K') & 0x8000f && g_eType == POWERWAIT)	//z축
	{
		
	}
	if (GetAsyncKeyState('L') & 0x8000f && g_eType == READY)	//z축
	{
		g_isNoKey = false;
		g_eType = BASIC;
	}

	switch (g_eType)		//타입을 다른데서 계속 변경해줄 필요 있음
	{
		//공이 던져지고 최종 위치
	case BASIC:
		g_WaitCamera.update(g_vBallPosition, g_moveWaitCamera, g_isNoKey);		//움지길 경로를 파악하여 
		g_isNoKey = true;
		g_eType = POWERWAIT;

		/*if (holePosition.x - g_vBallPosition.x <= 0.005f
			|| holePosition.z - g_vBallPosition.z <= 0.005f)
		{
			g_RelayCamera.setUp();
			g_RelayCamera.update(g_vBallPosition);
		}*/

		break;
		//지금은 그 수치에 가면 공이 멈춰짐, 멈춰지지 않고 특정각도에서 봐야함, 공도 계속 움직여야함, 중계 카메라 제대로 수정
	case CLOSE:
		g_RelayCamera.setUp();
		g_RelayCamera.update(g_vBallPosition);

		break;
	case SHOT:
		
//terrainHeight = g_pBall.getHeight();
g_moveWaitCamera=g_pBall.update( timeDelta, timeElapsed, &g_FollowCamera,&g_Hole,&g_WaitCamera,preBallPosition,&g_bDrop,g_fPower,&g_RelayCamera);		//follow카메라로			
	if ((g_vBallPosition.y == terrainHeight+0.5f) && (g_vBallPosition.x == g_icomX) && (g_vBallPosition.z == g_icomZ))		{
			g_eType = BASIC;
			g_icomX = 999999.0f;		//0이아닌 임의로 정해진숫자.
			g_icomZ = 999999.0f;
			preBallPosition = g_vBallPosition;
			
			g_iSwingCount++;
		}
		g_icomX = g_vBallPosition.x;
		g_icomZ = g_vBallPosition.z;
		
		//홀컵과 가까워지면 중계카메라로 보여주기
		/*if ((-50.0f<=holeDistance && holeDistance <0.f) || (0.f < holeDistance && holeDistance<= 50.0f))
		{
		g_RelayCamera.setUp();
		g_RelayCamera.update(g_vBallPosition);
		}
*/
		break;


	case POWERWAIT:		//(waitcamera로 방향조a절하고 그 방향대로 공을 날리자.)
		g_PowerProcess.keyState(&g_fPower);
		D3DXVECTOR3 tempVec = g_WaitCamera.getPosition();
		g_pBall.setInitVec(tempVec, g_fPower);

		if (GetAsyncKeyState(VK_SPACE) & 0x0001f && g_fPower != 0)	//z축
		{
			g_eType = SHOT;
			
		}
		//파워를 입력받을 수 있는 STOP상태
		break;
	}
}

void Render(float timeDelta, float timeElapsed)
{

}

//-----------------------------------------------------------------------------//

// Display - 화면에 표시하는 부분

//-----------------------------------------------------------------------------//


bool Display(float timeDelta)
{
	if (g_pd3dDevice)
	{
		LPDIRECT3DSURFACE9 pBackBuffer = NULL;
		
		// 후면 버퍼 초기화
		g_pd3dDevice->Clear(0, NULL, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, 0x00000000, 1.0f, 0);

		g_pd3dDevice->BeginScene();

		if (g_eType == POWERWAIT)		//각 상태별 다른 카메라클래스사용
		{
			D3DXVECTOR3 tempBallPos = g_pBall.getBallPosition();
			g_WaitCamera.keyState(timeDelta, tempBallPos);		//카메라 회전각 제한을 위해 ball의 좌표를 받는다.
		}
		if (g_eType == READY)
		{

			g_ReadyCamera.keyState(timeDelta, &g_eType);
		}//Device->Clear(0, 0, D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER, 0xffffffff, 1.0f, 0);
		
		//메인화면 
		g_terrain.setUpMatrices();
		g_terrain.draw(false);

		g_sky.SetUpMatrices();
		g_sky.Render();

		g_pBall.display();
		g_Hole.display();
		//count랑 power 표시
		g_DisplayCount.Display(g_iSwingCount);
		g_PowerProcess.Display(g_fPower);

		D3DXVECTOR3 ballPosition = g_pBall.getBallPosition();
		g_bisInHall = g_Hole.checkHole(ballPosition);	//홀에 들어갔으면 gameover check해주고 , swingCount가 5번이지만 들어가지 못한경우 holecheck 를 bool타입으로 해서 false true일 경우로 하자 

		if (g_bisInHall)
		
		{	
			g_iSwingCount++;
			//g_GameOver.Display();		//게임오버 나오게하기
 			return false;
		}
		else
		{
			//게임오버 체크		//swing count 5이상이라면 게임오버 화면,,,
		
			if (g_iSwingCount >= 5)
			{
				return false;
			}
		}

		static float timeElapsed = 0.0f;            //흐른 시간
		timeElapsed += timeDelta;

		Update(timeDelta, timeElapsed);

		
		for (int i = 0; i < _TreeList.size(); i++)
		{
		_TreeList[i]->SetupMatrices();
		_TreeList[i]->Draw(); }
		//이거 밑에 두줄 주석처리하면 상자 모양 나옴
		g_pd3dDevice->EndScene();
		//g_pd3dDevice->Present(0, 0, 0, 0);

		//서피스로 백버퍼 가져오기


		//surface
		//캡쳐된 내용이 들어갈 서피스
		LPDIRECT3DSURFACE9 capturingTarget = NULL;
		//가져오기
		g_pd3dDevice->GetRenderTarget(0, &pBackBuffer);

		//백 버퍼와 같은 속성으로 렌더타겟을 만든다
		D3DSURFACE_DESC d3dsd;
		//후면 버퍼 정보를 불러옴
		pBackBuffer->GetDesc(&d3dsd);
		//랜더타겟 생성
		g_pd3dDevice->CreateRenderTarget(180, 180, d3dsd.Format, d3dsd.MultiSampleType, d3dsd.MultiSampleQuality, false, &capturingTarget, NULL);

		//렌더타깃 설정
		g_pd3dDevice->SetRenderTarget(0, capturingTarget);
		g_pd3dDevice->Clear(0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0, 0, 30), 1, 0);

		//그릴 내용
		g_pd3dDevice->BeginScene();

		//카메라 설정
		//g_miniMap.SetupMatrices();//이게 카메라 화면인데 이 화면이 전체 뷰포트에 나온다. 전체에 안나오게 하려면 어떡학지??이 모양을 저장해서 서피스에 나오게 하기
		g_terrain.setUpMatrices();
		g_terrain.draw(false);
		g_sky.SetUpMatrices();
		g_sky.Render();

		g_pBall.display();
		g_Hole.display();

		//Update(timeDelta, timeElapsed);

for (int i = 0; i < _TreeList.size(); i++)
		{
			_TreeList[i]->SetupMatrices();
			_TreeList[i]->Draw();
		}		g_pd3dDevice->EndScene();

		//
		//여기에 텍스쳐를 만들어 캡쳐된 서피스의 내용을 복사한다.
		if (FAILED(D3DXCreateTexture(g_pd3dDevice, 180, 180, D3DX_DEFAULT, D3DUSAGE_RENDERTARGET | D3DUSAGE_AUTOGENMIPMAP, D3DFMT_X8R8G8B8, D3DPOOL_DEFAULT, &mini_texture)))//여기 다시 공부
			return false;

		D3DXSaveSurfaceToFileA("BackbufferImage.BMP", D3DXIFF_BMP, pBackBuffer, NULL, NULL);

		if (FAILED(mini_texture->GetSurfaceLevel(0, &capturingTarget)))
		{
			return false;
		}

		//기존 렌더 타켓 복구
		g_pd3dDevice->SetRenderTarget(0, pBackBuffer);
		//화면에 그리기
		//g_pd3dDevice->BeginScene();

		RECT dstRect;
		dstRect.left = 40;
		dstRect.top = 30;
		dstRect.right = 250;
		dstRect.bottom = 190;

		IDirect3DSurface9* current_backBuffer = NULL;
		//surface 그리기
		if (!FAILED(g_pd3dDevice->GetBackBuffer(0, 0, D3DBACKBUFFER_TYPE_MONO, &pBackBuffer)))
		{
			g_pd3dDevice->StretchRect(pBackBuffer, NULL, capturingTarget, &dstRect, D3DTEXF_NONE);
		}

		//g_pd3dDevice->SetTexture(0, g_miniMap.texture);
		//g_pd3dDevice->EndScene();

		//후면 버퍼 해제
		capturingTarget->Release();
		pBackBuffer->Release();

		g_pd3dDevice->Present(0, 0, 0, 0);
	}
	return true;
}

void DrawTrees()
{
	ObjMesh* _tree = new ObjMesh(g_pd3dDevice);
	_tree->Setup("resources/tree_mango_var01.obj");

	_tree->setPosition(-53.0f, 0.0f, -453.0f);
	_tree->setScale(0.2, 0.2, 0.2);
	_tree->LoadTexture("obj/low_poly_tree00.png");
	_TreeList.push_back(_tree);

	ObjMesh* _tree1 = new ObjMesh(g_pd3dDevice);
	_tree1->Setup("resources/tree_mango_var02.obj");
	
	_tree1->setPosition(-90.0f, 0.0f, -460.0f);
	_tree1->setScale(0.15, 0.15, 0.15);
	_tree1->LoadTexture("obj/low_poly_tree01.png");
	_TreeList.push_back(_tree1);

	ObjMesh* _tree2 = new ObjMesh(g_pd3dDevice);
	_tree2->Setup("resources/tree_mango_var03.obj");
	
	_tree2->setPosition(-140.0f, 0.0f, -480.0f);
	_tree2->setScale(0.17, 0.17, 0.17);
	_tree2->LoadTexture("obj/low_poly_tree02.png");
	_TreeList.push_back(_tree2);

	ObjMesh* _tree6 = new ObjMesh(g_pd3dDevice);
	_tree6->Setup("resources/low_poly_tree.obj");
	_tree6->setPosition(-25.0f, 0.0f, -460.0f);
	_tree6->setScale(0.1, 0.1, 0.1);
	_tree6->LoadTexture("obj/low_poly_tree02.png");
	_TreeList.push_back(_tree6);

	ObjMesh* _tree7 = new ObjMesh(g_pd3dDevice);
	_tree7->Setup("resources/tree_mango_var03.obj");
	_tree7->setPosition(-110.0f, 0.0f, -453.0f);
	_tree7->setScale(0.17, 0.17, 0.17);
	_tree7->LoadTexture("obj/low_poly_tree00.png");
	_TreeList.push_back(_tree7);


	ObjMesh* _tree3 = new ObjMesh(g_pd3dDevice);
	_tree3->Setup("resources/tree_mango_var01.obj");
	
	_tree3->setPosition(370.0f, 0.0f,-59.0f);
	_tree3->setScale(0.18, 0.18, 0.18);
	_tree3->LoadTexture("obj/low_poly_tree00.png");
	_TreeList.push_back(_tree3);

	ObjMesh* _tree4 = new ObjMesh(g_pd3dDevice);
	_tree4->Setup("resources/tree_mango_var02.obj");
	
	_tree4->setPosition(400.0f, 0.0f,-75.0f);
	_tree4->setScale(0.20, 0.20, 0.20);
	_tree4->LoadTexture("obj/low_poly_tree01.png");
	_TreeList.push_back(_tree4);

	ObjMesh* _tree5 = new ObjMesh(g_pd3dDevice);
	_tree5->Setup("resources/tree_mango_var03.obj");
	
	_tree5->setPosition(320.0f, 0.0f, -100.0f);
	_tree5->setScale(0.15, 0.15, 0.15);
	_tree5->LoadTexture("obj/low_poly_tree02.png");
	_TreeList.push_back(_tree5);

}
