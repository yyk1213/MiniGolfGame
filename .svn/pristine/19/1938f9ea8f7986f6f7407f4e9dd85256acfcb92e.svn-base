#include "MiniMapCam.h"

MiniMapCam::MiniMapCam()
{
}

MiniMapCam::~MiniMapCam()
{
}

void MiniMapCam::setDevice(IDirect3DDevice9* pd3dDevice)
{
	g_pd3dDevice = pd3dDevice;

	m_vPos = D3DXVECTOR3(0.0f, 250.0f, 0.0f);
	m_vRight = D3DXVECTOR3(1.0f, 0.0f, 0.0f);//물체가 오른쪽 방향을 가리키도록 정의
	m_vUp = D3DXVECTOR3(0.0f, 0.0f, 1.0f);//
	m_vLook = D3DXVECTOR3(0.0f, -1.0f, 0.0f);//물체가 가리키는 방향
}

bool MiniMapCam::SetupMatrices()
{
	// Keep camera's axes orthogonal to eachother
	D3DXVec3Normalize(&m_vLook, &m_vLook);

	D3DXVec3Cross(&m_vUp, &m_vLook, &m_vRight);
	D3DXVec3Normalize(&m_vUp, &m_vUp);

	D3DXVec3Cross(&m_vRight, &m_vUp, &m_vLook);
	D3DXVec3Normalize(&m_vRight, &m_vRight);

	// Build the view matrix:
	float x = -D3DXVec3Dot(&m_vRight, &m_vPos);
	float y = -D3DXVec3Dot(&m_vUp, &m_vPos);
	float z = -D3DXVec3Dot(&m_vLook, &m_vPos);

	mini_mat(0, 0) = m_vRight.x; mini_mat(0, 1) = m_vUp.x; mini_mat(0, 2) = m_vLook.x; mini_mat(0, 3) = 0.0f;
	mini_mat(1, 0) = m_vRight.y; mini_mat(1, 1) = m_vUp.y; mini_mat(1, 2) = m_vLook.y; mini_mat(1, 3) = 0.0f;
	mini_mat(2, 0) = m_vRight.z; mini_mat(2, 1) = m_vUp.z; mini_mat(2, 2) = m_vLook.z; mini_mat(2, 3) = 0.0f;
	mini_mat(3, 0) = x;        mini_mat(3, 1) = y;     mini_mat(3, 2) = z;       mini_mat(3, 3) = 1.0f;

	//D3DXMATRIX * _matView;
	g_pd3dDevice->SetTransform(D3DTS_VIEW, &mini_mat);

	//투영 행렬 계산 및 디바이스에 적용
	D3DXMatrixPerspectiveFovLH(&m_matProj, 540.0f, 540.0f, 1.0f, 800.0f);
	g_pd3dDevice->SetTransform(D3DTS_PROJECTION, &m_matProj);

	return S_OK;

}

void MiniMapCam::CleanUp()
{
	g_pd3dDevice->Release();
}
